#<?cfg paf policy ?>

camera:        "../megacam/description/Full_Megacam_geom.paf"
defects:    "../megacam/description/defects"
filters:    "../megacam/description/MegacamFilters.paf"

needCalibRegistry: true

exposures: {
    raw: {
        template:    "%(field)s/raw/v%(visit)d-f%(filter)s/s00/c%(ccd)02d-a%(amp)d.fits"
        python:     "lsst.afw.image.DecoratedImageU"
        persistable:         "DecoratedImageU"
        storage:     "FitsStorage"
        level:        "Amp"
        tables:        raw
        tables:        raw_visit
        tables:        raw_skyTile
    }
    postISR: {
        template:    "postISR/v%(visit)d-f%(filter)s/c%(ccd)02d-a%(amp)d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Amp"
        tables:        raw
        tables:        raw_visit
        tables:        raw_skyTile
    }
    postISRCCD: {
        template:    "postISRCCD/v%(visit)d-f%(filter)s/c%(ccd)02d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:        raw
        tables:        raw_visit
        tables:        raw_skyTile
    }
    visitim: {
        template:      "visitim/v%(visit)d-f%(filter)s/c%(ccd)02d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:        raw
        tables:        raw_visit
        tables:        raw_skyTile
    }
    calexp: {
        template:      "calexp/v%(visit)d-f%(filter)s/c%(ccd)02d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:        raw
        tables:        raw_visit
        tables:        raw_skyTile
    }
}

calibrations: {
    bias: {
        template:    "bias/v%(derivedRunId)s/c%(ccd)02d-a%(amp)d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Amp"
        tables:       bias
        reference:    "raw"
        refCols:      "visit"
        refCols:      "ccd"
        refCols:      "amp"
        columns:      "taiObs"
        validRange:   true
        obsTimeName:  "taiObs"
        validStartName: "validStart"
        validEndName: "validEnd"
        filter:       false
    }
    dark: {
        template:    "dark/v%(derivedRunId)s/c%(ccd)02d-a%(amp)d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Amp"
        tables:       dark
        reference:    "raw"
        refCols:      "visit"
        refCols:      "ccd"
        refCols:      "amp"
        columns:      "taiObs"
        validRange:   true
        obsTimeName:  "taiObs"
        validStartName: "validStart"
        validEndName: "validEnd"
        filter:       false
    }
    flat: {
        template:    "flat/v%(derivedRunId)s-f%(filter)s/c%(ccd)02d-a%(amp)d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Amp"
        tables:       flat
        reference:    "raw"
        refCols:      "visit"
        refCols:      "ccd"
        refCols:      "amp"
        columns:      "filter"
        columns:      "taiObs"
        validRange:   true
        obsTimeName:  "taiObs"
        validStartName: "validStart"
        validEndName: "validEnd"
        filter:       true
    }
    fringe: {
        template:    "fringe/v%(derivedRunId)s-f%(filter)s/c%(ccd)02d-a%(amp)d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Amp"
        tables:       fringe
        reference:    "raw"
        refCols:      "visit"
        refCols:      "ccd"
        refCols:      "amp"
        columns:      "filter"
        columns:      "taiObs"
        validRange:   true
        obsTimeName:  "taiObs"
        validStartName: "validStart"
        validEndName: "validEnd"
        filter:       true
    }
}

datasets: {
    icSrc: {
        template:      "icSrc/v%(visit)d-f%(filter)s/c%(ccd)02d.boost"
        python:        "lsst.afw.detection.PersistableSourceVector"
        persistable:        "PersistableSourceVector"
        storage:    "BoostStorage"
        tables:        raw
        tables:        raw_visit
        tables:        raw_skyTile
    }
    icMatch: {
        template:      "icMatch/v%(visit)d-f%(filter)s/R%(raft)s/S%(sensor)s.fits"
        python:        "lsst.afw.detection.PersistableSourceMatchVector"
        persistable:        "PersistableSourceMatchVector"
        storage:    "FitsStorage"
        tables:        raw
        tables:        raw_visit
        tables:        raw_skyTile
    }
    psf: {
        template:      "psf/v%(visit)d-f%(filter)s/c%(ccd)02d.boost"
        python:        "lsst.afw.detection.Psf"
        persistable:        "Psf"
        storage:    "BoostStorage"
        tables:        raw
        tables:        raw_visit
        tables:        raw_skyTile
    }
    apCorr: {
        template:      "apCorr/v%(visit)d-f%(filter)s/R%(raft)s/S%(sensor)s.pickle"
        python:        "lsst.meas.algorithms.ApertureCorrection.ApertureCorrection"
        persistable:        "ApertureCorrection"
        storage:    "PickleStorage"
        tables:        raw
        tables:        raw_visit
        tables:        raw_skyTile
    }
    sdqaAmp: {
        template:      "sdqaAmp/v%(visit)d-f%(filter)s/c%(ccd)02d-a%(amp)d.boost"
        python:        "lsst.sdqa.PersistableSdqaRatingVector"
        persistable:        "PersistableSdqaRatingVector"
        storage:    "BoostStorage"
        tables:        raw
        tables:        raw_visit
        tables:        raw_skyTile
    }
    sdqaCcd: {
        template:      "sdqaCcd/v%(visit)d-f%(filter)s/c%(ccd)02d.boost"
        python:        "lsst.sdqa.PersistableSdqaRatingVector"
        persistable:        "PersistableSdqaRatingVector"
        storage:    "BoostStorage"
        tables:        raw
        tables:        raw_visit
        tables:        raw_skyTile
    }
    src: {
        template:      "src/v%(visit)d-f%(filter)s/c%(ccd)02d.boost"
        python:        "lsst.afw.detection.PersistableSourceVector"
        persistable:        "PersistableSourceVector"
        storage:    "BoostStorage"
        tables:        raw
        tables:        raw_visit
        tables:        raw_skyTile
    }
    sourceHist: {
        template:      "results/st%(skyTile)d/sourceHist.fits"
        python:        "lsst.afw.image.DecoratedImageU"
        persistable:        "DecoratedImageU"
        storage:    "FitsStorage"
        tables:        raw_visit
        tables:        raw_skyTile
    }
    badSourceHist: {
        template:      "results/st%(skyTile)d/badSourceHist.fits"
        python:        "lsst.afw.image.DecoratedImageU"
        persistable:        "DecoratedImageU"
        storage:    "FitsStorage"
        tables:        raw_visit
        tables:        raw_skyTile
    }
    source: {
        template:      "results/st%(skyTile)d/source.boost"
        python:        "lsst.afw.detection.PersistableSourceVector"
        persistable:        "PersistableSourceVector"
        storage:    "BoostStorage"
        tables:        raw_visit
        tables:        raw_skyTile
    }
    badSource: {
        template:      "results/st%(skyTile)d/badSource.boost"
        python:        "lsst.afw.detection.PersistableSourceVector"
        persistable:        "PersistableSourceVector"
        storage:    "BoostStorage"
        tables:        raw_visit
        tables:        raw_skyTile
    }
    invalidSource: {
        template:      "results/st%(skyTile)d/invalidSource.boost"
        python:        "lsst.afw.detection.PersistableSourceVector"
        persistable:        "PersistableSourceVector"
        storage:    "BoostStorage"
        tables:        raw_visit
        tables:        raw_skyTile
    }
    object: {
        template:      "results/st%(skyTile)d/object.boost"
        python:        "lsst.afw.detection.PersistableSourceClusterVector"
        persistable:        "PersistableSourceClusterVector"
        storage:    "BoostStorage"
        tables:        raw_visit
        tables:        raw_skyTile
    }
    badObject: {
        template:      "results/st%(skyTile)d/badObject.boost"
        python:        "lsst.afw.detection.PersistableSourceClusterVector"
        persistable:        "PersistableSourceClusterVector"
        storage:    "BoostStorage"
        tables:        raw_visit
        tables:        raw_skyTile
    }
}
