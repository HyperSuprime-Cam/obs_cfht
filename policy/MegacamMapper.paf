#<?cfg paf policy ?>

needCalibRegistry: true

camera:     "../megacam/camera/"
defects:    "../megacam/defects"

skytiles: {
    resolutionPix: 700    # Resolution for skytiles: 700 --> 500 arcsec sides
    paddingArcsec: 10.0   # Overlap between skytiles
}

levels: {
    # Keys that are NOT relevant for a particular level
    skyTile: "visit" "ccd"
    tract: "patch"
    visit: "ccd" "extension" "state"
    sensor: "none"
}
defaultLevel: "Ccd"
defaultSubLevels: {
    # Default sublevel for dataRef.subItems()
    skyTile: "Ccd"
    visit: "Ccd"
    sensor: "none"
}

# exposures and datasets which are needed for all of the mappers are defined
# in the obs_base package (in either exposures.yaml or datasets.yaml).
# Where a modification to such a dataset is required for a particular camera,
# (e.g., for a template or specialized python type), the modification will
# appear below as a partial dataset definition.

exposures: {
    raw: {
        template:    "raw/%(runId)s/%(object)s/%(date)s/%(filter)s/%(visit)d%(state)1s.fits.fz[%(extension)d]"
        python:      "lsst.afw.image.DecoratedImageF"
        persistable: "DecoratedImageF"
        columns:     "visit"
        columns:     "state"
        columns:     "ccd"
    }
    postISRCCD: {
        template:    "postISRCCD/%(runId)s/%(object)s/%(date)s/%(filter)s/postISRCCD-%(visit)d-%(ccd)02d.fits"
        columns:     "visit"
        columns:     "ccd"
    }
    icExp: {
        template:    "icExp/%(runId)s/%(object)s/%(date)s/%(filter)s/icExp-%(visit)d-%(ccd)02d.fits"
        columns:     "visit"
        columns:     "ccd"
    }
    calexp: {
        template:    "calexp/%(runId)s/%(object)s/%(date)s/%(filter)s/calexp-%(visit)d-%(ccd)02d.fits"
        columns:     "visit"
        columns:     "ccd"
    }
    wcs: {
        template:    "calexp/%(runId)s/%(object)s/%(date)s/%(filter)s/%(tract)d/wcs-%(visit)d-%(ccd)02d.fits"
        python:      "lsst.afw.image.ExposureF"
        persistable: "ExposureF"
        columns:     "visit" "ccd"
    }

    deepCoadd_tempExp: {
        template:    "deepCoadd/%(filter)s/%(tract)d/%(patch)s/warp-%(filter)s-%(tract)d-%(patch)s-%(visit)d.fits"
    }
    deepCoadd_tempExpPsfMatched: {
        template:    "deepCoadd/%(filter)s/%(tract)d/%(patch)s/psfMatchedWarp-%(filter)s-%(tract)d-%(patch)s-%(visit)d.fits"
    }



}

calibrations: {
    bias: {
        template:    "%(path)s[%(extension)d]"
        python:      "lsst.afw.image.DecoratedImageF"
        persistable: "DecoratedImageF"
        storage:     "FitsStorage"
        level:       "Ccd"
        tables:      "bias"
        columns:     "taiObs"
        columns:     "extension"
        reference:   "raw"
        refCols:     "visit"
        refCols:     "ccd"
        refCols:     "taiObs"
        refCols:     "extension"
        filter:      false
        validRange:  true
        validStartName: "validStart"
        validEndName: "validEnd"
        obsTimeName: "taiObs"
    }
    dark: {
        template:    "%(path)s[%(extension)d]"
        python:      "lsst.afw.image.DecoratedImageF"
        persistable: "DecoratedImageF"
        storage:     "FitsStorage"
        level:       "Ccd"
        tables:      "dark"
        columns:     "taiObs"
        reference:   "raw"
        refCols:     "visit"
        refCols:     "ccd"
        refCols:     "taiObs"
        refCols:     "extension"
        filter:      false
        validRange:  true
        validStartName: "validStart"
        validEndName: "validEnd"
        obsTimeName: "taiObs"
    }
    flat: {
        template:    "%(path)s[%(extension)d]"
        python:      "lsst.afw.image.DecoratedImageF"
        persistable: "DecoratedImageF"
        storage:     "FitsStorage"
        level:       "Ccd"
        tables:      "flat"
        columns:     "filter"
        columns:     "taiObs"
        columns:     "extension"
        reference:   "raw"
        refCols:     "visit"
        refCols:     "ccd"
        refCols:     "filter"
        refCols:     "taiObs"
        refCols:     "extension"
        filter:      true
        validRange:  true
        validStartName: "validStart"
        validEndName: "validEnd"
        obsTimeName: "taiObs"
    }
    fringe: {
        template:    "%(path)s[%(extension)d]"
        python:      "lsst.afw.image.DecoratedImageF"
        persistable: "DecoratedImageF"
        storage:     "FitsStorage"
        level:       "Ccd"
        tables:      "fringe"
        columns:     "filter"
        columns:     "taiObs"
        columns:     "extension"
        reference:   "raw"
        refCols:     "visit"
        refCols:     "ccd"
        refCols:     "filter"
        refCols:     "taiObs"
        refCols:     "extension"
        filter:      true
        validRange:  true
        validStartName: "validStart"
        validEndName: "validEnd"
        obsTimeName: "taiObs"
    }
}

datasets: {
    src: {
        template:      "src/%(runId)s/%(object)s/%(date)s/%(filter)s/SRC-%(visit)d-%(ccd)02d.fits"
    }
    icMatch: {
        template:      "icMatch/%(runId)s/%(object)s/%(date)s/%(filter)s/ICMATCH-%(visit)d-%(ccd)02d.fits"
        python:        "lsst.afw.table.BaseCatalog"
        persistable:   "BaseCatalog"
        storage:       "FitsCatalogStorage"
        tables:        "raw"
    }
    srcMatch: {
        template:      "srcMatch/%(runId)s/%(object)s/%(date)s/%(filter)s/SRCMATCH-%(visit)d-%(ccd)02d.fits"
    }
    icSrc: {
        template:      "icSrc/%(runId)s/%(object)s/%(date)s/%(filter)s/ICSRC-%(visit)d-%(ccd)02d.fits"
    }
    icExpBackground: {
        template:      "icExp/%(runId)s/%(object)s/%(date)s/%(filter)s/bkgd-%(visit)d-%(ccd)02d.fits"
    }
    calexpBackground: {
        template:      "calexp/%(runId)s/%(object)s/%(date)s/%(filter)s/bkgd-%(visit)d-%(ccd)02d.fits"
    }
    log: {
        template:      "logs/%(runId)s/%(object)s/%(date)s/%(filter)s/run.log"
        python:        "str"
        persistable:   "None"
        storage:       "TextStorage"
    }
    logDir: {
        template:      "logs/%(runId)s/%(object)s/%(date)s/%(filter)s/"
        python:        "str"
        persistable:   "None"
        storage:       "None"
    }


    processCcd_metadata: {
        template:      "metadata/%(runId)s/%(object)s/%(date)s/%(filter)s/MD-processCcd-%(visit)d-%(ccd)02d.boost"
    }
    isr_config: {
        python:        "lsst.obs.cfht.cfhtIsrTask.CfhtIsrTaskConfig"
    }
    isr_metadata: {
        template:      "metadata/%(runId)s/%(object)s/%(date)s/%(filter)s/MD-isr-%(visit)d-%(ccd)02d.boost"
    }
    characterizeImage_metadata: {
        template:      "metadata/%(runId)s/%(object)s/%(date)s/%(filter)s/MD-characterizeImage-%(visit)d-%(ccd)02d.boost"
    }
    calibrate_metadata: {
        template:      "metadata/%(runId)s/%(object)s/%(date)s/%(filter)s/MD-calibrate-%(visit)d-%(ccd)02d.boost"
    }
    deep_makeSkyMap_config: {
        template:      "config/deep_makeSkyMap.py"
        python:        "lsst.pipe.tasks.makeSkyMap.MakeSkyMapTask.ConfigClass"
        persistable:   "Config"
        storage:       "ConfigStorage"
        tables:        raw
    }
    deep_safeClipAssembleCoadd_config: {
        python:        "lsst.pipe.tasks.assembleCoadd.AssembleCoaddConfig"
    }
    deep_makeCoaddTempExp_metadata: {
        template:      "deep_makeCoaddTempExp_metadat/%(filter)s/%(tract)d/%(patch)s_metadata.boost"
    }
    deep_safeClipAssembleCoadd_metadata: {
        template:      "deep_assembleCoadd_metadata/%(filter)s/%(tract)d/%(patch)s_metadata.boost"
    }
    deepCoadd_srcMatch: {
        template:      "deepCoadd-results/%(filter)s/%(tract)d/%(patch)s/srcMatch-%(filter)s-%(tract)d-%(patch)s.fits"
    }
    forced_src: {
        template:      "forced/%(runId)s/%(object)s/%(date)s/%(filter)s/%(tract)d/FORCEDSRC-%(visit)d-%(ccd)02d.fits"
    }
    forced_src_schema: {
        template:      "schema/forced_src.fits"
    }
    forcedPhotCoadd_config: {
        template:      "config/forcedPhotCoadd.py"
        python:        "lsst.meas.base.forcedPhotCoadd.ForcedPhotCoaddConfig"
        persistable:   "Config"
        storage:       "ConfigStorage"
    }
    # Detections on coadds

    # Merged detections on coadds

    # Measurements on coadds

    # Reference catalog for coadds

    singleFrameDriver_metadata: {
        template:      "%(pointing)05d/%(filter)s/singleFrameDriver_metadata/%(visit)07d.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:        "PropertySet"
        storage:    "BoostStorage"
        tables:        raw  
        tables:        raw_visit
    } 
}
