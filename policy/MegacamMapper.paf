#<?cfg paf policy ?>

needCalibRegistry: true

camera:     "../megacam/Full_Megacam_geom.paf"
defects:    "../megacam/defects"
defaultLevel: "Ccd"

exposures: {
    raw: {
        template:    "%(runId)s/%(object)s/%(date)s/%(filter)s/%(visit)d%(state)1s.fits.fz[%(extension)d]"
        python:      "lsst.afw.image.DecoratedImageF"
        persistable: "DecoratedImageF"
        storage:     "FitsStorage"
        level:       "Ccd"
        tables:      "raw"
        columns:     "visit"
        columns:     "state"
        columns:     "ccd"
    }
    postISRCCD: {
        template:    "%(runId)s/%(object)s/%(date)s/%(filter)s/postISRCCD-%(visit)d-%(ccd)02d.fits"
        python:      "lsst.afw.image.ExposureF"
        persistable: "ExposureF"
        storage:     "FitsStorage"
        level:       "Ccd"
        tables:      "raw"
        columns:     "visit"
        columns:     "ccd"
    }
    calexp: {
        template:    "%(runId)s/%(object)s/%(date)s/%(filter)s/calexp-%(visit)d-%(ccd)02d.fits"
        python:      "lsst.afw.image.ExposureF"
        persistable: "ExposureF"
        storage:     "FitsStorage"
        level:       "Ccd"
        tables:      "raw"
        columns:     "visit"
        columns:     "ccd"
    }
    calexpBackground: {
        template:    "%(runId)s/%(object)s/%(date)s/%(filter)s/calexp-%(visit)d-%(ccd)02d.fits"
        python:        "lsst.afw.math.BackgroundList"
        persistable:   "PurePythonClass"
        storage:       "FitsCatalogStorage"
        level:       "Ccd"
        tables:      "raw"
        columns:     "visit"
        columns:     "ccd"
    }

    coaddTempExp: {
        template:    "%(runId)s/temp/%(tract)d/COADDTEMP-%(patch)s.fits"
        python:      "lsst.afw.image.ExposureF"
        persistable: "ExposureF"
        storage:     "FitsStorage"
        tables:      "raw"
        columns:     "visit"
        columns:     "ccd"
    }
    wcs: {
        template:    "%(runId)s/%(object)s/%(date)s/%(filter)s/calexp-%(visit)d-%(ccd)02d.wcs.fits"
        python:        "lsst.afw.image.ExposureI"
        persistable:        "ExposureI"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:        "raw"
        tables:        "raw_visit"
        tables:        "raw_skyTile"
    }

    fcr: {
        template:    "%(runId)s/%(object)s/%(date)s/%(filter)s/calexp-%(visit)d-%(ccd)02d.fcr.fits"
        python:        "lsst.afw.image.ExposureI"
        persistable:        "ExposureI"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:        "raw"
        tables:        "raw_visit"
        tables:        "raw_skyTile"
    }

}

calibrations: {
    bias: {
        template:    "%(path)s[ccd%(ccd)02d]"
        python:      "lsst.afw.image.DecoratedImageF"
        persistable: "DecoratedImageF"
        storage:     "FitsStorage"
        level:       "Ccd"
        tables:      "bias"
        columns:     "taiObs"
        reference:   "raw"
        refCols:     "visit"
        refCols:     "ccd"
        refCols:     "taiObs"
        filter:      false
        validRange:  true
        validStartName: "validStart"
        validEndName: "validEnd"
        obsTimeName: "taiObs"
    }
    dark: {
        template:    "%(path)s[ccd%(ccd)02d]"
        python:      "lsst.afw.image.DecoratedImageF"
        persistable: "DecoratedImageF"
        storage:     "FitsStorage"
        level:       "Ccd"
        tables:      "dark"
        columns:     "taiObs"
        reference:   "raw"
        refCols:     "visit"
        refCols:     "ccd"
        refCols:     "taiObs"
        filter:      false
        validRange:  true
        validStartName: "validStart"
        validEndName: "validEnd"
        obsTimeName: "taiObs"
    }
    flat: {
        template:    "%(path)s[ccd%(ccd)02d]"
        python:      "lsst.afw.image.DecoratedImageF"
        persistable: "DecoratedImageF"
        storage:     "FitsStorage"
        level:       "Ccd"
        tables:      "flat"
        columns:     "filter"
        columns:     "taiObs"
        reference:   "raw"
        refCols:     "visit"
        refCols:     "ccd"
        refCols:     "filter"
        refCols:     "taiObs"
        filter:      true
        validRange:  true
        validStartName: "validStart"
        validEndName: "validEnd"
        obsTimeName: "taiObs"
    }
    fringe: {
        template:    "%(path)s[ccd%(ccd)02d]"
        python:      "lsst.afw.image.DecoratedImageF"
        persistable: "DecoratedImageF"
        storage:     "FitsStorage"
        level:       "Ccd"
        tables:      "fringe"
        columns:     "filter"
        columns:     "taiObs"
        reference:   "raw"
        refCols:     "visit"
        refCols:     "ccd"
        refCols:     "filter"
        refCols:     "taiObs"
        filter:      true
        validRange:  true
        validStartName: "validStart"
        validEndName: "validEnd"
        obsTimeName: "taiObs"
    }
}



datasets: {
    psf: {
        template:      "%(runId)s/%(object)s/%(date)s/%(filter)s/PSF-%(visit)d-%(ccd)02d.boost"
        python:        "lsst.afw.detection.Psf"
        persistable:   "Psf"
        storage:       "BoostStorage"
        tables:        "raw"
    }
    apCorr: {
        template:      "%(runId)s/%(object)s/%(date)s/%(filter)s/APC-%(visit)d-%(ccd)02d.pickle"
        python:        "lsst.meas.algorithms.ApertureCorrection"
        persistable:   "ApertureCorrection"
        storage:       "PickleStorage"
        tables:        "raw"
    }
    src: {
        template:      "%(runId)s/%(object)s/%(date)s/%(filter)s/SRC-%(visit)d-%(ccd)02d.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "SourceCatalog"
        storage:       "FitsCatalogStorage"
        tables:        "raw"
    }
    src_schema: {
        template:      "schema/src.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "SourceCatalog"
        storage:       "FitsCatalogStorage"
        tables:        "raw"
    }
    icMatch: {
        template:      "%(runId)s/%(object)s/%(date)s/%(filter)s/ICMATCH-%(visit)d-%(ccd)02d.fits"
        python:        "lsst.afw.table.BaseCatalog"
        persistable:   "BaseCatalog"
        storage:       "FitsCatalogStorage"
        tables:        "raw"
    }
    icSrc: {
        template:      "%(runId)s/%(object)s/%(date)s/%(filter)s/ICSRC-%(visit)d-%(ccd)02d.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "SourceCatalog"
        storage:       "FitsCatalogStorage"
        tables:        "raw"
    }
    icSrc_schema: {
        template:      "schema/icSrc.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "SourceCatalog"
        storage:       "FitsCatalogStorage"
        tables:        "raw"
    }
    log: {
        template:      "%(runId)s/logs/%(object)s/%(date)s/%(filter)s/run.log"
        python:        "str"
        persistable:   "None"
        storage:       "TextStorage"
    }
    logDir: {
        template:      "%(runId)s/logs/%(object)s/%(date)s/%(filter)s/"
        python:        "str"
        persistable:   "None"
        storage:       "None"
    }

    ccdExposureId: {
        template:     "ignored"
        # Provide something to import, although we actually return a long
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }
    ccdExposureId_bits: {
        template:     "ignored"
        # Provide something to import, although we actually return an int
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }

    stackExposureId: {
        template:     "ignored"
        # Provide something to import, although we actually return a long
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }
    stackExposureId_bits: {
        template:     "ignored"
        # Provide something to import, although we actually return an int
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }

    processCcd_config: {
        template:      "config/processCcd.py"
        python:        "lsst.pipe.tasks.processCcd.ProcessCcdConfig"
        persistable:   "Config"
        storage:       "ConfigStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    processCcd_metadata: {
        template:      "%(runId)s/%(object)s/%(date)s/%(filter)s/MD-processCcd-%(visit)d-%(ccd)02d.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:   "PropertySet"
        storage:       "BoostStorage"
        tables:        raw
        tables:        raw_skyTile
    }

    deepCoadd: {
        template:      "%(runId)s/deepCoadd/%(tract)d/%(patch)s.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:   "ExposureF"
        storage:       "FitsStorage"
        tables:        "raw"
    }
    deepCoadd_depth: {
        template:      "%(runId)s/deepCoadd/%(tract)d/%(patch)s.depth.fits"
        python:        "lsst.afw.image.ImageF"
        persistable:   "ImageF"
        storage:       "FitsStorage"
        tables:        "raw"
    }
    deepCoadd_psf: {
        template:      "%(runId)s/deepCoadd/%(tract)d/%(patch)s.boost"
        python:        "lsst.afw.detection.Psf"
        persistable:   "Psf"
        storage:       "BoostStorage"
        tables:        "raw"
    }
    deepCoadd_skyMap: {
        template:      "%(runId)s/deepCoadd/skyMap.pickle"
        python:        "lsst.skymap.BaseSkyMap"
        persistable:   "ignored"
        storage:       "PickleStorage"
        tables:        "raw"
    }

}
